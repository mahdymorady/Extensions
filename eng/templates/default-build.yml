# default-build.yml
#
# Description: Defines a build phase for invoking build.sh/cmd
#
# Parameters:
#   configuration: string
#       Release or Debug
#   agentOs: string
#       Used in templates to define variables which are OS specific. Typically from the set { Windows, Linux, macOS }
#   buildArgs: string
#       Additional arguments to pass to the build.sh/cmd script.
#       Note: -ci is always passed
#   artifacts:
#      publish: boolean
#           Should artifacts be published
#      path: string
#           The file path to artifacts output
#      name: string
#           The name of the artifact container
#   codeSign: boolean
#       This build definition is enabled for code signing. (Only applies to Windows)

#
# See https://docs.microsoft.com/en-us/vsts/pipelines/yaml-schema for details
#

parameters:
  agentOs: 'Windows'
  poolName: ''
  buildArgs: ''
  configuration: 'Release'
  codeSign: false
  publishToBar: false
  artifacts:
    publish: false
    name: ''
    path: 'artifacts/'

jobs:
- job: ${{ parameters.agentOs }}
  # Double the default timeout. Publishing is subject to huge delays due to contention on the dotnet-core blob feed
  timeoutInMinutes: 120
  workspace:
    clean: all
  # Map friendly OS names to the right queue
  # See https://github.com/dotnet/arcade/blob/master/Documentation/ChoosingAMachinePool.md
  pool:
    ${{ if and(eq(parameters.poolName, ''), eq(parameters.agentOs, 'macOS')) }}:
      name: Hosted macOS
      vmImage: macOS-10.13
    ${{ if and(eq(parameters.poolName, ''), eq(parameters.agentOs, 'Linux')) }}:
      name: Hosted Ubuntu 1604
      vmImage: ubuntu-16.04
    ${{ if and(eq(parameters.poolName, ''), eq(parameters.agentOs, 'Windows')) }}:
      ${{ if ne(variables['System.TeamProject'], 'internal') }}:
        name: Hosted VS2017
        vmImage: vs2017-win2016
      ${{ if eq(variables['System.TeamProject'], 'internal') }}:
        name: dotnet-internal-temp
  variables:
    - name: KOREBUILD_KEEPGLOBALJSON
      value: 1
    - name: AgentOsName
      value: ${{ parameters.agentOs }}
    - name: ASPNETCORE_TEST_LOG_MAXPATH
      value: "200" # Keep test log file name length low enough for artifact zipping
    - name: DOTNET_HOME
      value: $(Agent.WorkFolder)/.dotnet
    - name: BuildScriptArgs
      value: ${{ parameters.buildArgs }}
    - name: BuildConfiguration
      value: ${{ parameters.configuration }}
    - name: VSTS_OVERWRITE_TEMP
      value: false # Workaround for https://github.com/dotnet/core-eng/issues/2812
    - ${{ if or(ne(parameters.codeSign, 'true'), ne(variables['System.TeamProject'], 'internal')) }}:
      - name: _SignType
        value: 'test'
    - ${{ if and(eq(parameters.codeSign, 'true'), eq(variables['System.TeamProject'], 'internal')) }}:
      - name: TeamName
        value: AspNetCore
      - name: _SignType
        value: real
      - group: DotNet-Blob-Feed
  steps:
  - checkout: self
    clean: true
  - ${{ if and(eq(variables['System.TeamProject'], 'internal'), eq(parameters.agentOs, 'Windows'), eq(parameters.codeSign, 'true')) }}:
    - task: MicroBuildSigningPlugin@1
      displayName: Install MicroBuild Signing plugin
      condition: and(succeeded(), in(variables['_SignType'], 'test', 'real'))
      inputs:
        signType: $(_SignType)
        zipSources: false
        feedSource: https://dnceng.pkgs.visualstudio.com/_packaging/MicroBuildToolset/nuget/v3/index.json
  - ${{ if eq(parameters.agentOs, 'Windows') }}:
    - script: eng\common\cibuild.cmd
        -configuration $(BuildConfiguration)
        -prepareMachine
        -warnaserror $False
        /p:OfficialBuildId=$(BUILD.BUILDNUMBER)
        /p:DotNetSignType=$(_SignType)
      displayName: Run cibuild.cmd
  - ${{ if ne(parameters.agentOs, 'Windows') }}:
    - script: eng/common/cibuild.sh
        --warnAsError false
        --configuration $(BuildConfiguration)
        --prepareMachine
        /p:OfficialBuildId=$(BUILD.BUILDNUMBER)
        /p:DotNetSignType=$(_SignType)
      displayName: Run cibuild.sh
  - task: PublishTestResults@2
    displayName: Publish xUnit Test Results
    condition: always()
    continueOnError: true
    inputs:
      testRunner: xunit
      testResultsFiles: 'artifacts/TestResults/$(BuildConfiguration)/*.xml'
  - ${{ if eq(parameters.artifacts.publish, 'true') }}:
    - task: PublishBuildArtifacts@1
      displayName: Upload artifacts
      condition: eq(variables['system.pullrequest.isfork'], false)
      inputs:
        pathtoPublish: ${{ parameters.artifacts.path }}
        ${{ if eq(parameters.artifacts.name, '') }}:
          artifactName: artifacts-$(AgentOsName)-$(BuildConfiguration)
        ${{ if ne(parameters.artifacts.name, '') }}:
          artifactName: ${{ parameters.artifacts.name }}
        artifactType: Container
        parallel: true
  - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest'), eq(parameters.publishToBar, 'true')) }}:
    - script: .dotnet\dotnet.exe msbuild eng/repo.targets /t:PublishToBAR /p:AzureAccountKey=$(dotnetfeed-storage-access-key-1) /p:AzureFeedUrl=https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json /p:DotNetPublishToBlobFeed=true /p:Configuration=$(BuildConfiguration)
      displayName: Publish packages to dotnet-core feed
    - task: AzureKeyVault@1
      inputs:
        azureSubscription: 'DotNet-Engineering-Services_KeyVault'
        KeyVaultName: EngKeyVault
        SecretsFilter: 'MaestroAccessToken'
      displayName: Fetch secrets from KeyVault
    - script: eng\common\publishbuildassets.cmd /p:ManifestsPath='$(Build.SourcesDirectory)/artifacts/AssetManifest/' /p:BuildAssetRegistryToken=$(MaestroAccessToken) /p:MaestroApiEndpoint=https://maestro-prod.westus2.cloudapp.azure.com /p:Configuration=$(BuildConfiguration)
      displayName: Register Build Assets with Maestro
  - ${{ if and(eq(variables['System.TeamProject'], 'internal'), eq(parameters.agentOs, 'Windows')) }}:
    - task: MicroBuildCleanup@1
      displayName: Cleanup MicroBuild tasks
      condition: always()
